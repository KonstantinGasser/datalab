// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserAuthenticationClient is the client API for UserAuthentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthenticationClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	IsAuthed(ctx context.Context, in *IsAuthedRequest, opts ...grpc.CallOption) (*IsAuthedResponse, error)
	AddAppAccess(ctx context.Context, in *AddAppAccessRequest, opts ...grpc.CallOption) (*AddAppAccessResponse, error)
}

type userAuthenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthenticationClient(cc grpc.ClientConnInterface) UserAuthenticationClient {
	return &userAuthenticationClient{cc}
}

func (c *userAuthenticationClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/auth_proto.UserAuthentication/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth_proto.UserAuthentication/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) IsAuthed(ctx context.Context, in *IsAuthedRequest, opts ...grpc.CallOption) (*IsAuthedResponse, error) {
	out := new(IsAuthedResponse)
	err := c.cc.Invoke(ctx, "/auth_proto.UserAuthentication/IsAuthed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) AddAppAccess(ctx context.Context, in *AddAppAccessRequest, opts ...grpc.CallOption) (*AddAppAccessResponse, error) {
	out := new(AddAppAccessResponse)
	err := c.cc.Invoke(ctx, "/auth_proto.UserAuthentication/AddAppAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthenticationServer is the server API for UserAuthentication service.
// All implementations must embed UnimplementedUserAuthenticationServer
// for forward compatibility
type UserAuthenticationServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	IsAuthed(context.Context, *IsAuthedRequest) (*IsAuthedResponse, error)
	AddAppAccess(context.Context, *AddAppAccessRequest) (*AddAppAccessResponse, error)
	mustEmbedUnimplementedUserAuthenticationServer()
}

// UnimplementedUserAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedUserAuthenticationServer struct {
}

func (UnimplementedUserAuthenticationServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserAuthenticationServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserAuthenticationServer) IsAuthed(context.Context, *IsAuthedRequest) (*IsAuthedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthed not implemented")
}
func (UnimplementedUserAuthenticationServer) AddAppAccess(context.Context, *AddAppAccessRequest) (*AddAppAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppAccess not implemented")
}
func (UnimplementedUserAuthenticationServer) mustEmbedUnimplementedUserAuthenticationServer() {}

// UnsafeUserAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthenticationServer will
// result in compilation errors.
type UnsafeUserAuthenticationServer interface {
	mustEmbedUnimplementedUserAuthenticationServer()
}

func RegisterUserAuthenticationServer(s grpc.ServiceRegistrar, srv UserAuthenticationServer) {
	s.RegisterService(&UserAuthentication_ServiceDesc, srv)
}

func _UserAuthentication_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthenticationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_proto.UserAuthentication/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthenticationServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthentication_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthenticationServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_proto.UserAuthentication/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthenticationServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthentication_IsAuthed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthenticationServer).IsAuthed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_proto.UserAuthentication/IsAuthed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthenticationServer).IsAuthed(ctx, req.(*IsAuthedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthentication_AddAppAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthenticationServer).AddAppAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_proto.UserAuthentication/AddAppAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthenticationServer).AddAppAccess(ctx, req.(*AddAppAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuthentication_ServiceDesc is the grpc.ServiceDesc for UserAuthentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuthentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_proto.UserAuthentication",
	HandlerType: (*UserAuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserAuthentication_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserAuthentication_Login_Handler,
		},
		{
			MethodName: "IsAuthed",
			Handler:    _UserAuthentication_IsAuthed_Handler,
		},
		{
			MethodName: "AddAppAccess",
			Handler:    _UserAuthentication_AddAppAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.user.auth.agent/cmd/grpcserver/proto/api.user-auth.proto",
}
