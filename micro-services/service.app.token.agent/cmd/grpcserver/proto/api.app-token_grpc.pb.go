// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppTokenClient is the client API for AppToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppTokenClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	InValidate(ctx context.Context, in *InValidateRequest, opts ...grpc.CallOption) (*InValidateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	AppendPermission(ctx context.Context, in *AppendPermissionRequest, opts ...grpc.CallOption) (*AppendPermissionResponse, error)
	RollbackAppendPermission(ctx context.Context, in *RollbackAppendPermissionRequest, opts ...grpc.CallOption) (*RollbackAppendPermissionResponse, error)
	UnlockAppToken(ctx context.Context, in *UnlockAppTokenRequest, opts ...grpc.CallOption) (*UnlockAppTokenResponse, error)
}

type appTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewAppTokenClient(cc grpc.ClientConnInterface) AppTokenClient {
	return &appTokenClient{cc}
}

func (c *appTokenClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppToken/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenClient) Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppToken/Issue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppToken/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenClient) InValidate(ctx context.Context, in *InValidateRequest, opts ...grpc.CallOption) (*InValidateResponse, error) {
	out := new(InValidateResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppToken/InValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppToken/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenClient) AppendPermission(ctx context.Context, in *AppendPermissionRequest, opts ...grpc.CallOption) (*AppendPermissionResponse, error) {
	out := new(AppendPermissionResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppToken/AppendPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenClient) RollbackAppendPermission(ctx context.Context, in *RollbackAppendPermissionRequest, opts ...grpc.CallOption) (*RollbackAppendPermissionResponse, error) {
	out := new(RollbackAppendPermissionResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppToken/RollbackAppendPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenClient) UnlockAppToken(ctx context.Context, in *UnlockAppTokenRequest, opts ...grpc.CallOption) (*UnlockAppTokenResponse, error) {
	out := new(UnlockAppTokenResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppToken/UnlockAppToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppTokenServer is the server API for AppToken service.
// All implementations must embed UnimplementedAppTokenServer
// for forward compatibility
type AppTokenServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	Issue(context.Context, *IssueRequest) (*IssueResponse, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	InValidate(context.Context, *InValidateRequest) (*InValidateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	AppendPermission(context.Context, *AppendPermissionRequest) (*AppendPermissionResponse, error)
	RollbackAppendPermission(context.Context, *RollbackAppendPermissionRequest) (*RollbackAppendPermissionResponse, error)
	UnlockAppToken(context.Context, *UnlockAppTokenRequest) (*UnlockAppTokenResponse, error)
	mustEmbedUnimplementedAppTokenServer()
}

// UnimplementedAppTokenServer must be embedded to have forward compatible implementations.
type UnimplementedAppTokenServer struct {
}

func (UnimplementedAppTokenServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedAppTokenServer) Issue(context.Context, *IssueRequest) (*IssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedAppTokenServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAppTokenServer) InValidate(context.Context, *InValidateRequest) (*InValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InValidate not implemented")
}
func (UnimplementedAppTokenServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppTokenServer) AppendPermission(context.Context, *AppendPermissionRequest) (*AppendPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendPermission not implemented")
}
func (UnimplementedAppTokenServer) RollbackAppendPermission(context.Context, *RollbackAppendPermissionRequest) (*RollbackAppendPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackAppendPermission not implemented")
}
func (UnimplementedAppTokenServer) UnlockAppToken(context.Context, *UnlockAppTokenRequest) (*UnlockAppTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockAppToken not implemented")
}
func (UnimplementedAppTokenServer) mustEmbedUnimplementedAppTokenServer() {}

// UnsafeAppTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppTokenServer will
// result in compilation errors.
type UnsafeAppTokenServer interface {
	mustEmbedUnimplementedAppTokenServer()
}

func RegisterAppTokenServer(s grpc.ServiceRegistrar, srv AppTokenServer) {
	s.RegisterService(&AppToken_ServiceDesc, srv)
}

func _AppToken_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppToken/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppToken_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppToken/Issue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenServer).Issue(ctx, req.(*IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppToken_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppToken/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppToken_InValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenServer).InValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppToken/InValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenServer).InValidate(ctx, req.(*InValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppToken_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppToken/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppToken_AppendPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenServer).AppendPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppToken/AppendPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenServer).AppendPermission(ctx, req.(*AppendPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppToken_RollbackAppendPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackAppendPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenServer).RollbackAppendPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppToken/RollbackAppendPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenServer).RollbackAppendPermission(ctx, req.(*RollbackAppendPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppToken_UnlockAppToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAppTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenServer).UnlockAppToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppToken/UnlockAppToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenServer).UnlockAppToken(ctx, req.(*UnlockAppTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppToken_ServiceDesc is the grpc.ServiceDesc for AppToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "issuer_proto.AppToken",
	HandlerType: (*AppTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _AppToken_Initialize_Handler,
		},
		{
			MethodName: "Issue",
			Handler:    _AppToken_Issue_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _AppToken_Validate_Handler,
		},
		{
			MethodName: "InValidate",
			Handler:    _AppToken_InValidate_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AppToken_Get_Handler,
		},
		{
			MethodName: "AppendPermission",
			Handler:    _AppToken_AppendPermission_Handler,
		},
		{
			MethodName: "RollbackAppendPermission",
			Handler:    _AppToken_RollbackAppendPermission_Handler,
		},
		{
			MethodName: "UnlockAppToken",
			Handler:    _AppToken_UnlockAppToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.app.token.agent/cmd/grpcserver/proto/api.app-token.proto",
}
