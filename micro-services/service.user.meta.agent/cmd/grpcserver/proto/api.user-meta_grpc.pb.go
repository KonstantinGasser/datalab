// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserMetaClient is the client API for UserMeta service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMetaClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	GetColleagues(ctx context.Context, in *GetColleaguesRequest, opts ...grpc.CallOption) (*GetColleaguesResponse, error)
}

type userMetaClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMetaClient(cc grpc.ClientConnInterface) UserMetaClient {
	return &userMetaClient{cc}
}

func (c *userMetaClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/user_proto.UserMeta/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMetaClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/user_proto.UserMeta/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMetaClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/user_proto.UserMeta/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMetaClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, "/user_proto.UserMeta/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMetaClient) GetColleagues(ctx context.Context, in *GetColleaguesRequest, opts ...grpc.CallOption) (*GetColleaguesResponse, error) {
	out := new(GetColleaguesResponse)
	err := c.cc.Invoke(ctx, "/user_proto.UserMeta/GetColleagues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMetaServer is the server API for UserMeta service.
// All implementations must embed UnimplementedUserMetaServer
// for forward compatibility
type UserMetaServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	GetColleagues(context.Context, *GetColleaguesRequest) (*GetColleaguesResponse, error)
	mustEmbedUnimplementedUserMetaServer()
}

// UnimplementedUserMetaServer must be embedded to have forward compatible implementations.
type UnimplementedUserMetaServer struct {
}

func (UnimplementedUserMetaServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserMetaServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserMetaServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserMetaServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUserMetaServer) GetColleagues(context.Context, *GetColleaguesRequest) (*GetColleaguesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColleagues not implemented")
}
func (UnimplementedUserMetaServer) mustEmbedUnimplementedUserMetaServer() {}

// UnsafeUserMetaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMetaServer will
// result in compilation errors.
type UnsafeUserMetaServer interface {
	mustEmbedUnimplementedUserMetaServer()
}

func RegisterUserMetaServer(s grpc.ServiceRegistrar, srv UserMetaServer) {
	s.RegisterService(&UserMeta_ServiceDesc, srv)
}

func _UserMeta_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMetaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_proto.UserMeta/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMetaServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeta_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMetaServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_proto.UserMeta/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMetaServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeta_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMetaServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_proto.UserMeta/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMetaServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeta_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMetaServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_proto.UserMeta/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMetaServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeta_GetColleagues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColleaguesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMetaServer).GetColleagues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_proto.UserMeta/GetColleagues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMetaServer).GetColleagues(ctx, req.(*GetColleaguesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMeta_ServiceDesc is the grpc.ServiceDesc for UserMeta service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMeta_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_proto.UserMeta",
	HandlerType: (*UserMetaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserMeta_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserMeta_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserMeta_Get_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _UserMeta_GetById_Handler,
		},
		{
			MethodName: "GetColleagues",
			Handler:    _UserMeta_GetColleagues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.user.meta.agent/cmd/grpcserver/proto/api.user-meta.proto",
}
