// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppMetaClient is the client API for AppMeta service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppMetaClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error)
	InviteReminderOK(ctx context.Context, in *InviteReminderOKRequest, opts ...grpc.CallOption) (*InviteReminderOKResponse, error)
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error)
	LockApp(ctx context.Context, in *LockAppRequest, opts ...grpc.CallOption) (*LockAppResponse, error)
	UnlockApp(ctx context.Context, in *UnlockAppRequest, opts ...grpc.CallOption) (*UnlockAppResponse, error)
}

type appMetaClient struct {
	cc grpc.ClientConnInterface
}

func NewAppMetaClient(cc grpc.ClientConnInterface) AppMetaClient {
	return &appMetaClient{cc}
}

func (c *appMetaClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppMeta/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMetaClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppMeta/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMetaClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppMeta/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMetaClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppMeta/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMetaClient) Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error) {
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppMeta/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMetaClient) InviteReminderOK(ctx context.Context, in *InviteReminderOKRequest, opts ...grpc.CallOption) (*InviteReminderOKResponse, error) {
	out := new(InviteReminderOKResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppMeta/InviteReminderOK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMetaClient) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error) {
	out := new(AcceptInviteResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppMeta/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMetaClient) LockApp(ctx context.Context, in *LockAppRequest, opts ...grpc.CallOption) (*LockAppResponse, error) {
	out := new(LockAppResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppMeta/LockApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMetaClient) UnlockApp(ctx context.Context, in *UnlockAppRequest, opts ...grpc.CallOption) (*UnlockAppResponse, error) {
	out := new(UnlockAppResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppMeta/UnlockApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppMetaServer is the server API for AppMeta service.
// All implementations must embed UnimplementedAppMetaServer
// for forward compatibility
type AppMetaServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	Invite(context.Context, *InviteRequest) (*InviteResponse, error)
	InviteReminderOK(context.Context, *InviteReminderOKRequest) (*InviteReminderOKResponse, error)
	AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error)
	LockApp(context.Context, *LockAppRequest) (*LockAppResponse, error)
	UnlockApp(context.Context, *UnlockAppRequest) (*UnlockAppResponse, error)
	mustEmbedUnimplementedAppMetaServer()
}

// UnimplementedAppMetaServer must be embedded to have forward compatible implementations.
type UnimplementedAppMetaServer struct {
}

func (UnimplementedAppMetaServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppMetaServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppMetaServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppMetaServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAppMetaServer) Invite(context.Context, *InviteRequest) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedAppMetaServer) InviteReminderOK(context.Context, *InviteReminderOKRequest) (*InviteReminderOKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteReminderOK not implemented")
}
func (UnimplementedAppMetaServer) AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (UnimplementedAppMetaServer) LockApp(context.Context, *LockAppRequest) (*LockAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockApp not implemented")
}
func (UnimplementedAppMetaServer) UnlockApp(context.Context, *UnlockAppRequest) (*UnlockAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockApp not implemented")
}
func (UnimplementedAppMetaServer) mustEmbedUnimplementedAppMetaServer() {}

// UnsafeAppMetaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppMetaServer will
// result in compilation errors.
type UnsafeAppMetaServer interface {
	mustEmbedUnimplementedAppMetaServer()
}

func RegisterAppMetaServer(s grpc.ServiceRegistrar, srv AppMetaServer) {
	s.RegisterService(&AppMeta_ServiceDesc, srv)
}

func _AppMeta_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMetaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppMeta/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMetaServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMeta_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMetaServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppMeta/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMetaServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMeta_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMetaServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppMeta/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMetaServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMeta_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMetaServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppMeta/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMetaServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMeta_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMetaServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppMeta/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMetaServer).Invite(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMeta_InviteReminderOK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteReminderOKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMetaServer).InviteReminderOK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppMeta/InviteReminderOK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMetaServer).InviteReminderOK(ctx, req.(*InviteReminderOKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMeta_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMetaServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppMeta/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMetaServer).AcceptInvite(ctx, req.(*AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMeta_LockApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMetaServer).LockApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppMeta/LockApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMetaServer).LockApp(ctx, req.(*LockAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMeta_UnlockApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMetaServer).UnlockApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppMeta/UnlockApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMetaServer).UnlockApp(ctx, req.(*UnlockAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppMeta_ServiceDesc is the grpc.ServiceDesc for AppMeta service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppMeta_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_proto.AppMeta",
	HandlerType: (*AppMetaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppMeta_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppMeta_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AppMeta_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _AppMeta_GetList_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _AppMeta_Invite_Handler,
		},
		{
			MethodName: "InviteReminderOK",
			Handler:    _AppMeta_InviteReminderOK_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _AppMeta_AcceptInvite_Handler,
		},
		{
			MethodName: "LockApp",
			Handler:    _AppMeta_LockApp_Handler,
		},
		{
			MethodName: "UnlockApp",
			Handler:    _AppMeta_UnlockApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.app.meta.agent/cmd/grpcserver/proto/api.app-meta.proto",
}
